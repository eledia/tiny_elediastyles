define("tiny_elediastyles/commands",["exports","core/str","./common","./options"],(function(_exports,_str,_common,_options){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.getSetup=void 0;_exports.getSetup=async()=>{const[buttonLabel,clearButtonLabel]=await Promise.all([(0,_str.get_string)("button_showStyles",_common.component),(0,_str.get_string)("button_clearStyles",_common.component)]);return editor=>{let showClearButton=(0,_options.getShowClearButtonOption)(editor),jsonDef=(0,_options.getjsonDefinition)(editor)||"[]";if("string"==typeof jsonDef)try{jsonDef=JSON.parse(jsonDef)}catch(e){window.console.error("Error parsing style JSON:",e),jsonDef=[]}const rawCss=(0,_options.getCssDefinition)(editor);editor.once("init",(()=>{rawCss&&editor.contentStyles.push(rawCss);const useExternal=(0,_options.getUseExternalCss)(editor),externalUrl=((0,_options.getExternalCssUrl)(editor)||"").trim();useExternal&&externalUrl&&editor.contentCSS.push(externalUrl)}));const clearAllClasses=()=>{if(!Array.isArray(jsonDef))return;editor.execCommand("FormatBlock",!1,"p");const blocks=editor.selection.getSelectedBlocks();if(blocks&&blocks.length){const blockClasses=jsonDef.flatMap((style=>"block"===style.type&&style.classes?style.classes.split(" "):[])),uniqueBlockClasses=[...new Set(blockClasses)].filter(Boolean);blocks.forEach((block=>{uniqueBlockClasses.forEach((className=>{editor.dom.removeClass(block,className)}))}))}jsonDef.forEach((styleDef=>{if("inline"===styleDef.type&&styleDef.classes){const formatName="custom_inline_".concat(styleDef.classes.replace(/\s+/g,"_"));editor.formatter.match(formatName)&&editor.formatter.remove(formatName)}}))},buildMenuItems=()=>{let menuItems=[];if((0,_options.getShowClearButtonOption)(editor)||menuItems.push({type:"menuitem",text:clearButtonLabel,icon:"invert",onAction:()=>clearAllClasses()}),!Array.isArray(jsonDef))return menuItems;const styleItems=jsonDef.map((styleDef=>({type:"menuitem",text:styleDef.title||styleDef.classes,onAction:()=>function(classes){if("block"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"block")){const formatName="custom_block_".concat(classes.replace(/\s+/g,"_"));editor.formatter.register(formatName,{block:"div",classes:classes,wrapper:!0}),editor.formatter.toggle(formatName)}else{const formatName="custom_inline_".concat(classes.replace(/\s+/g,"_"));editor.formatter.register(formatName,{inline:"span",classes:classes}),editor.formatter.toggle(formatName)}}(styleDef.classes,styleDef.type),onSetup:()=>(setTimeout((()=>{document.querySelectorAll(".tox-menu .tox-collection__item").forEach((item=>{item.getAttribute("aria-label")===(styleDef.title||styleDef.classes)&&(item.classList.add("eledia-style-item"),styleDef.classes&&styleDef.classes.split(" ").forEach((cls=>{cls&&item.classList.add(cls)})))}))}),0),()=>{})})));return[...menuItems,...styleItems]};editor.on("keydown",(e=>{if("Enter"===e.key&&!e.shiftKey){const node=editor.selection.getNode(),wrapperDiv=editor.dom.getParents(node,(el=>jsonDef.some((style=>"block"===style.type&&el.classList.contains(style.classes)))),editor.getBody());if(!wrapperDiv||0===wrapperDiv.length)return;const container=wrapperDiv[0],currentBlock=editor.dom.getParent(node,"p,h1,h2,h3,h4,h5,h6,li");if(currentBlock&&editor.dom.isEmpty(currentBlock)){e.preventDefault();const newPara=editor.dom.create("p");editor.dom.insertAfter(newPara,container),editor.dom.remove(currentBlock),editor.selection.setCursorLocation(newPara,0)}}})),editor.ui.registry.addMenuButton(_common.pluginButtonName,{icon:"color-levels",tooltip:buttonLabel,fetch:callback=>{callback(buildMenuItems())}}),showClearButton&&editor.ui.registry.addButton(_common.pluginClearButtonName,{icon:"invert",tooltip:clearButtonLabel,onAction:()=>clearAllClasses()})}}}));

//# sourceMappingURL=commands.min.js.map