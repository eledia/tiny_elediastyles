{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny tiny_elediastyles for Moodle.\n *\n * @module      tiny_elediastyles\n * @copyright   2025 Alex Schander <alexander.schander@eledia.de>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { get_string as getString } from \"core/str\";\nimport { component, pluginButtonName, pluginClearButtonName } from \"./common\";\nimport { getCssDefinition, getjsonDefinition, getExternalCssUrl, getUseExternalCss, getShowClearButtonOption } from \"./options\";\n\nexport const getSetup = async () => {\n    const [\n        buttonLabel,\n        clearButtonLabel,\n    ] = await Promise.all([\n        getString(\"button_showStyles\", component),\n        getString(\"button_clearStyles\", component),\n    ]);\n\n    return (editor) => {\n        let showClearButton = getShowClearButtonOption(editor);\n        let jsonDef = getjsonDefinition(editor) || '[]';\n        if (typeof jsonDef === \"string\") {\n            try {\n                jsonDef = JSON.parse(jsonDef);\n            } catch (e) {\n                window.console.error(\"Error parsing style JSON:\", e);\n                jsonDef = [];\n            }\n        }\n\n        const rawCss = getCssDefinition(editor);\n        editor.once('init', () => {\n            // Inject the compiled CSS from the plugin settings.\n            if (rawCss) {\n                editor.contentStyles.push(rawCss);\n            }\n\n            // Also inject external CSS file if configured.\n            const useExternal = getUseExternalCss(editor);\n            const externalUrl = (getExternalCssUrl(editor) || '').trim();\n            if (useExternal && externalUrl) {\n                editor.contentCSS.push(externalUrl);\n            }\n        });\n\n        /**\n         * Applies the CSS classes based on the style definition.\n         * @param {string} classes - The CSS classes to apply.\n         * @param {string} [type='block'] - The type of style, e.g., 'block' or 'inline'.\n         */\n        const applyClass = (classes, type = \"block\") => {\n            if (type === \"block\") {\n                // Create a unique name for the format.\n                const formatName = `custom_block_${classes.replace(/\\s+/g, '_')}`;\n\n                // Register the format, specifying a DIV as the block element.\n                editor.formatter.register(formatName, {\n                    block: 'div',\n                    classes: classes,\n                    wrapper: true // Allows nesting other block elements like lists.\n                });\n\n                // Apply the format to the current selection.\n                editor.formatter.toggle(formatName);\n\n            } else {\n                // Handle inline formatting.\n                const formatName = `custom_inline_${classes.replace(/\\s+/g, '_')}`;\n                editor.formatter.register(formatName, {\n                    inline: \"span\",\n                    classes: classes,\n                });\n                editor.formatter.toggle(formatName);\n            }\n        };\n\n        /**\n         * Removes all custom style classes from the current selection.\n         * Resets styled block elements back to standard paragraphs.\n         */\n        const clearAllClasses = () => {\n            if (!Array.isArray(jsonDef)) {\n                return;\n            }\n\n            // Block-Level Clearing\n            editor.execCommand('FormatBlock', false, 'p');\n\n            const blocks = editor.selection.getSelectedBlocks();\n            if (blocks && blocks.length) {\n                const blockClasses = jsonDef.flatMap(style => {\n                    if (style.type === 'block' && style.classes) {\n                        return style.classes.split(' ');\n                    }\n                    return [];\n                });\n\n                const uniqueBlockClasses = [...new Set(blockClasses)].filter(Boolean);\n\n                blocks.forEach(block => {\n                    uniqueBlockClasses.forEach(className => {\n                        editor.dom.removeClass(block, className);\n                    });\n                });\n            }\n\n            // Inline-Level Clearing\n            jsonDef.forEach(styleDef => {\n                if (styleDef.type === \"inline\" && styleDef.classes) {\n                    const formatName = `custom_inline_${styleDef.classes.replace(/\\s+/g, '_')}`;\n                    if (editor.formatter.match(formatName)) {\n                        editor.formatter.remove(formatName);\n                    }\n                }\n            });\n        };\n\n        /**\n         * Builds the menu items for the dropdown button.\n         * Conditionally inserts a \"Clear Formatting\" item.\n         */\n        const buildMenuItems = () => {\n            // in case we got an old value\n            const showClear = getShowClearButtonOption(editor);\n            let menuItems = [];\n\n            // ONLY add the \"Clear Style\" item to the dropdown if the separate button is DISABLED.\n            if (!showClear) {\n                menuItems.push({\n                    type: 'menuitem',\n                    text: clearButtonLabel,\n                    icon: 'invert',\n                    onAction: () => clearAllClasses()\n                });\n            }\n\n            if (!Array.isArray(jsonDef)) {\n                return menuItems;\n            }\n\n            // Generate the dynamic list of styles from the JSON definition.\n            const styleItems = jsonDef.map((styleDef) => ({\n                type: 'menuitem',\n                text: styleDef.title || styleDef.classes,\n                onAction: () => applyClass(styleDef.classes, styleDef.type),\n                onSetup: () => {\n                    setTimeout(() => {\n                        const menuItems = document.querySelectorAll('.tox-menu .tox-collection__item');\n                        menuItems.forEach(item => {\n                            if (item.getAttribute('aria-label') === (styleDef.title || styleDef.classes)) {\n                                item.classList.add('eledia-style-item');\n                                if (styleDef.classes) {\n                                    styleDef.classes.split(' ').forEach(cls => {\n                                        if (cls) {\n                                            item.classList.add(cls);\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                    }, 0);\n                    return () => {};\n                }\n            }));\n\n            // Combine the conditional clear item with the dynamic styles.\n            return [...menuItems, ...styleItems];\n        };\n\n        // Add \"Double Enter\" behavior to exit styled divs.\n        editor.on('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                const node = editor.selection.getNode();\n\n                const wrapperDiv = editor.dom.getParents(node, (el) => {\n                    return jsonDef.some(style => style.type === 'block' && el.classList.contains(style.classes));\n                }, editor.getBody());\n\n                if (!wrapperDiv || wrapperDiv.length === 0) {\n                    return;\n                }\n                const container = wrapperDiv[0];\n\n                const currentBlock = editor.dom.getParent(node, 'p,h1,h2,h3,h4,h5,h6,li');\n                if (currentBlock && editor.dom.isEmpty(currentBlock)) {\n                    e.preventDefault();\n                    const newPara = editor.dom.create('p');\n                    editor.dom.insertAfter(newPara, container);\n                    editor.dom.remove(currentBlock);\n                    editor.selection.setCursorLocation(newPara, 0);\n                }\n            }\n        });\n\n        // Register the main menu button.\n        editor.ui.registry.addMenuButton(pluginButtonName, {\n            icon: 'color-levels',\n            tooltip: buttonLabel,\n            fetch: (callback) => {\n                const items = buildMenuItems();\n                callback(items);\n            },\n        });\n\n        // Register the clear format button ONLY if the setting is enabled.\n        if (showClearButton) {\n            editor.ui.registry.addButton(pluginClearButtonName, {\n                icon: 'invert',\n                tooltip: clearButtonLabel,\n                onAction: () => clearAllClasses(),\n            });\n        }\n    };\n};"],"names":["async","buttonLabel","clearButtonLabel","Promise","all","component","editor","showClearButton","jsonDef","JSON","parse","e","window","console","error","rawCss","once","contentStyles","push","useExternal","externalUrl","trim","contentCSS","clearAllClasses","Array","isArray","execCommand","blocks","selection","getSelectedBlocks","length","blockClasses","flatMap","style","type","classes","split","uniqueBlockClasses","Set","filter","Boolean","forEach","block","className","dom","removeClass","styleDef","formatName","replace","formatter","match","remove","buildMenuItems","menuItems","text","icon","onAction","styleItems","map","title","register","wrapper","toggle","inline","applyClass","onSetup","setTimeout","document","querySelectorAll","item","getAttribute","classList","add","cls","on","key","shiftKey","node","getNode","wrapperDiv","getParents","el","some","contains","getBody","container","currentBlock","getParent","isEmpty","preventDefault","newPara","create","insertAfter","setCursorLocation","ui","registry","addMenuButton","pluginButtonName","tooltip","fetch","callback","addButton","pluginClearButtonName"],"mappings":"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"}