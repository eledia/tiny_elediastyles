{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny tiny_elediastyles for Moodle.\n *\n * @module      tiny_elediastyles\n * @copyright   2025 Alex Schander <alexander.schander@eledia.de>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport { getTinyMCE } from 'editor_tiny/loader';\nimport { getPluginMetadata } from 'editor_tiny/utils';\nimport { component, pluginName } from './common';\nimport { register as registerOptions } from './options';\nimport { getSetup as getCommandSetup } from './commands';\nimport * as Configuration from './configuration';\n\n// ====================\n// Inject theme ALL CSS into the Tiny iframe\n// ====================\n/**\n * I look up the editor CSS loaded in the Tiny iframe (.../theme/styles.php/.../editor),\n * derive .../all from it, and append it as a <link rel=\"stylesheet\"> to the iframe head,\n * so the full theme CSS (including Font Awesome) becomes available.\n * @param {TinyMCEEditor} editor\n */\nconst injectThemeAllCss = (editor) => {\n    try {\n        const doc = editor.getDoc();\n        if (!doc || !doc.head) {\n            return;\n        }\n\n        // Collect all stylesheet links inside the iframe.\n        const links = Array.from(doc.querySelectorAll('link[rel=\"stylesheet\"]'));\n\n        // Find the link that ends with .../editor.\n        const editorLink = links.find(l =>\n            l && typeof l.href === 'string' &&\n            /\\/theme\\/styles\\.php\\/[^/]+\\/[^/]+\\/editor$/.test(l.href)\n        );\n\n        if (!editorLink) {\n            // eslint-disable-next-line no-console\n            console.warn('[tiny_elediastyles] No editor stylesheet found in the iframe.');\n            return;\n        }\n\n        // Derive /all from /editor.\n        const allHref = editorLink.href.replace(/\\/editor$/, '/all');\n\n        // Skip if it's already present.\n        const already = links.some(l => l && l.href === allHref);\n        if (already) {\n            return;\n        }\n\n        // Append a <link> for .../all.\n        const link = doc.createElement('link');\n        link.rel = 'stylesheet';\n        link.href = allHref;\n        doc.head.appendChild(link);\n\n        // eslint-disable-next-line no-console\n        console.log('[tiny_elediastyles] Injected theme ALL CSS into Tiny iframe:', allHref);\n    } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('[tiny_elediastyles] injectThemeAllCss error:', e);\n    }\n};\n\n// Setup the tiny_elediastyles plugin.\nexport default new Promise((resolve) => {\n    Promise.all([\n        getTinyMCE(),\n        getPluginMetadata(component, pluginName),\n        getCommandSetup(),\n    ]).then(([tinyMCE, pluginMetadata, setupCommands]) => {\n        tinyMCE.PluginManager.add(pluginName, (editor) => {\n            registerOptions(editor);\n            setupCommands(editor);\n\n            // Inject ALL CSS once Tiny is initialized.\n            editor.on('init', () => {\n                injectThemeAllCss(editor);\n            });\n\n            return pluginMetadata;\n        });\n        resolve([pluginName, Configuration]);\n    }).catch((error) => {\n        window.console.error(\"Error during plugin setup:\", error);\n        // reject(error); // optional\n        resolve([pluginName, Configuration]);\n    });\n});\n"],"names":["Promise","resolve","all","component","pluginName","then","_ref","tinyMCE","pluginMetadata","setupCommands","PluginManager","add","editor","on","doc","getDoc","head","links","Array","from","querySelectorAll","editorLink","find","l","href","test","console","warn","allHref","replace","some","link","createElement","rel","appendChild","log","e","error","injectThemeAllCss","Configuration","catch","window"],"mappings":";;;;;;;kCAoFe,IAAIA,SAASC,UACxBD,QAAQE,IAAI,EACR,yBACA,4BAAkBC,kBAAWC,qBAC7B,0BACDC,MAAKC,WAAEC,QAASC,eAAgBC,oBAC/BF,QAAQG,cAAcC,IAAIP,oBAAaQ,+BACnBA,QAChBH,cAAcG,QAGdA,OAAOC,GAAG,QAAQ,KAzDHD,CAAAA,mBAEbE,IAAMF,OAAOG,aACdD,MAAQA,IAAIE,kBAKXC,MAAQC,MAAMC,KAAKL,IAAIM,iBAAiB,2BAGxCC,WAAaJ,MAAMK,MAAKC,GAC1BA,GAAuB,iBAAXA,EAAEC,MACd,8CAA8CC,KAAKF,EAAEC,YAGpDH,uBAEDK,QAAQC,KAAK,uEAKXC,QAAUP,WAAWG,KAAKK,QAAQ,YAAa,WAGrCZ,MAAMa,MAAKP,GAAKA,GAAKA,EAAEC,OAASI,uBAM1CG,KAAOjB,IAAIkB,cAAc,QAC/BD,KAAKE,IAAM,aACXF,KAAKP,KAAOI,QACZd,IAAIE,KAAKkB,YAAYH,MAGrBL,QAAQS,IAAI,+DAAgEP,SAC9E,MAAOQ,GAELV,QAAQW,MAAM,+CAAgDD,KAiBtDE,CAAkB1B,WAGfJ,kBAEXP,QAAQ,CAACG,mBAAYmC,mBACtBC,OAAOH,QACNI,OAAOf,QAAQW,MAAM,6BAA8BA,OAEnDpC,QAAQ,CAACG,mBAAYmC"}